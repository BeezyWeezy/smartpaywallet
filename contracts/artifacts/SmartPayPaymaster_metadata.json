{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "_entryPoint",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "gasUsed",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "GasSponsored",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "entryPoint",
				"outputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IPaymaster.PostOpMode",
						"name": "mode",
						"type": "uint8"
					},
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "actualGasCost",
						"type": "uint256"
					}
				],
				"name": "postOp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "maxCost",
						"type": "uint256"
					}
				],
				"name": "validatePaymasterUserOp",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "context",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "validationData",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"postOp(uint8,bytes,uint256)": {
					"params": {
						"actualGasCost": "- actual gas used so far (without this postOp call).",
						"context": "- the context value returned by validatePaymasterUserOp",
						"mode": "enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"params": {
						"maxCost": "the maximum cost of this transaction (based on maximum gas and gas price from userOp)",
						"userOp": "the user operation",
						"userOpHash": "hash of the user's request data."
					},
					"returns": {
						"context": "value to send to a postOp      zero length to signify postOp is not required.",
						"validationData": "signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"postOp(uint8,bytes,uint256)": {
					"notice": "post-operation handler. Must verify sender is the entryPoint"
				},
				"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"notice": "payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SmartPayPaymaster.sol": "SmartPayPaymaster"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@account-abstraction/contracts/core/Helpers.sol": {
			"keccak256": "0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://69643e83f68e6a13d5075c7565bfce326673b0bd98c432033c4603ea84835746",
				"dweb:/ipfs/QmSwSzjYyV7qudi5vvsmzHMG2Z4YJZxX51RRXXVCLaNcEU"
			]
		},
		"@account-abstraction/contracts/interfaces/IAggregator.sol": {
			"keccak256": "0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://20ed837bc5909c89ff1910246bf245a5dad6840aa939382e1694964eb7dbd37b",
				"dweb:/ipfs/QmTMybRq5yyghPDDs1ZCNAVB9sSJ4WHe6Q9mejuKPTAdNP"
			]
		},
		"@account-abstraction/contracts/interfaces/IEntryPoint.sol": {
			"keccak256": "0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d2d21cc92c2fdab2b58d21bc25d4cd0e8c284b922528a186b087b818d54bc6cf",
				"dweb:/ipfs/QmT1qrfuBjsv2rmRCDn8mgPXHp94hARJwzbcDuBLDTbFWd"
			]
		},
		"@account-abstraction/contracts/interfaces/INonceManager.sol": {
			"keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
				"dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
			]
		},
		"@account-abstraction/contracts/interfaces/IPaymaster.sol": {
			"keccak256": "0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://616cbcf51778b1961b7f20a547bec7efae6d1d565df0f651926241ed8bde9ad8",
				"dweb:/ipfs/QmaVsgffUUmeUJYgStvRr8cNZ1LBbrc3FYNLW4JT1dVLia"
			]
		},
		"@account-abstraction/contracts/interfaces/IStakeManager.sol": {
			"keccak256": "0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://b389da4714a138be63704a576a482505eab2855e263b38a93706395d8d42e7c3",
				"dweb:/ipfs/QmeeAZpdHwUXxqP8pxA7GNtoCGBmmH4FaqLLwScVKGxtxZ"
			]
		},
		"@account-abstraction/contracts/interfaces/UserOperation.sol": {
			"keccak256": "0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6ff83c59432e733bf6304dda27cd4b0f34401917dd535e2669cc842d2d26568c",
				"dweb:/ipfs/QmPJbHU5TAjHqUTZzAcicEeG2nknmwCN43L4EW9LHbknTN"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/SmartPayPaymaster.sol": {
			"keccak256": "0x525baf95ebf30a0a9189af54f73a300e374e796f2cadfb9cd69fa2ebbee7e745",
			"license": "MIT",
			"urls": [
				"bzz-raw://5bd623a9b2f23c1019fd169f85583c92444215af2e80d77b6ad5613e70663425",
				"dweb:/ipfs/QmRyy2od4x39RzuS7EhdxUs9TuiQ3TNLuT43iJeityiNdB"
			]
		},
		"contracts/base/CustomBasePaymaster.sol": {
			"keccak256": "0xa38a7ccd539e965c35f59a1acfa1d6ec748ac1b49f4fea716edfa1cba878e04a",
			"license": "MIT",
			"urls": [
				"bzz-raw://247d01756bd4fd28721d455c8c7f8b65b487d598b14232b6fbf3d72a52c41906",
				"dweb:/ipfs/QmNaJetQyBqj9tuQWq7wk1nVKYCpS9CsmdpvCvCYA3HFYS"
			]
		}
	},
	"version": 1
}